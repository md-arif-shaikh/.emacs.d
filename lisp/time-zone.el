(defun arif/convert-time (from-zone to-zone time-to-convert)
  "Convert TIME from FROM-ZONE to TO-ZONE."
  (interactive "sFrom which timezone (use abbreviation, e.g., EST for Eeastern Standard Time): 
sTo which timezone (use abbreviation, e.g., IST for Indian Standard Time): 
sTime to be converted (HH:MM PM/pm(optional) DAY(optional)): ")
  (let* ((time-zones '(("EST" . "-0500")
		       ("CST" . "-0600")
		       ("CDT" . "-0500")
		       ("EET" . "+0200")
		       ("CET" . "+0100")
		       ("IST" . "+0530")
		       ("KOLKATA" . "+0530")
		       ("JST" . "+0900")
		       ("TOKYO" . "+0900")))
	 (days '("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"))
	 (time (parse-time-string time-to-convert))
	 (from-zone-u (upcase from-zone))
	 (to-zone-u (upcase to-zone))
	 (from-sec (nth 0 time))
	 (from-min (nth 1 time))
	 (from-hour (nth 2 time))
	 (from-day (nth 6 time)))
    (when (string-match-p (regexp-quote "PM") (upcase time-to-convert))
      (setq  from-hour (+ 12 from-hour)))
    (let* ((time-shift (- (nth 8 (parse-time-string (cdr (assoc to-zone-u time-zones))))
			  (nth 8 (parse-time-string (cdr (assoc from-zone-u time-zones))))))
	   (hour-shift (/ time-shift (* 60 60)))
	   (min-shift (/ (% time-shift (* 60 60)) 60))
	   (to-min (+ from-min min-shift))
	   (to-hour (+ from-hour hour-shift))
	   (to-day-name ""))
      (when (>= to-min 60)
	(setq to-min (- to-min 60))
	(setq to-hour (1+ to-hour)))
      (cond ((>= to-hour 24) (progn
			       (setq to-hour (- to-hour 24))
			       (if (not (equal from-day nil))
				   (setq to-day-name (nth (1+ from-day) days))
				 (setq to-day-name "+ 1 day"))))		
	    ((< to-hour 0) (progn
			     (setq to-hour (+ 24 to-hour))
			     (if (not (equal from-day nil))
				 (setq to-day-name (nth (1- from-day) days))
			       (setq to-day-name "- 1 day"))))
	    ((and (> to-hour 0) (< to-hour 24)) (if (not (equal from-day nil))
						    (setq to-day-name (nth from-day days))
						  (setq to-day-name ""))))
      (cond ((= to-hour 0) (setq A-or-P "Midnight"))
	    ((< to-hour 12) (setq A-or-P "AM"))
	    ((= to-hour 12) (setq A-or-P "Noon"))
	    ((> to-hour 12) (progn
			      (setq to-hour (- to-hour 12))
			      (setq A-or-P "PM"))))
      (message (format "%s %s = %.2d:%.2d %s %s %s" (upcase time-to-convert) from-zone-u to-hour to-min (upcase A-or-P) (upcase to-day-name) to-zone-u)))))
