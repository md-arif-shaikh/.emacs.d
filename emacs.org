#+TITLE: Emacs config file
#+AUTHOR: Md Arif Shaikh
#+Email: arifshaikh.astro@gmail.com
#+Date: Thu Feb 25 08:11:11 PM IST 2021  
* Table of Contents                                                     :TOC:
- [[#straight][straight]]
- [[#use-package][use-package]]
- [[#load-file-if-found][load-file if found]]
- [[#tramp][Tramp]]
  - [[#connect-remote-machines][Connect Remote Machines]]
- [[#ui-customization][UI customization]]
  - [[#themes][Themes]]
  - [[#all-the-icons][All the icons]]
  - [[#font-size][Font size]]
  - [[#bengali-font][Bengali font]]
  - [[#cusor][cusor]]
  - [[#doom-modeline][doom-modeline]]
  - [[#rainbow-delimeters][Rainbow delimeters]]
  - [[#show-parens][Show parens]]
  - [[#highlight-current-line][Highlight current line]]
  - [[#linum-mode][Linum mode]]
  - [[#autopair][Autopair]]
- [[#convert-timezone][convert-timezone]]
- [[#pyenv][Pyenv]]
- [[#auctex][Auctex]]
- [[#pdf-tools][pdf-tools]]
- [[#lsp][LSP]]
  - [[#setup-gc-cons-threshld][setup gc-cons-threshld]]
- [[#python][Python]]
  - [[#python-with-lsp][Python with LSP]]
  - [[#lsp-python-with-tramp][LSP python with tramp]]
  - [[#python-with-elpy][Python with elpy]]
- [[#racket][Racket]]
- [[#jupyter][jupyter]]
- [[#latex-with-lsp][LaTeX with LSP]]
- [[#clean-latex][Clean Latex]]
- [[#julia][Julia]]
- [[#rust][Rust]]
- [[#company-autocompletion][Company autocompletion]]
- [[#shell-mode][Shell mode]]
  - [[#disable-company][Disable company]]
  - [[#sourcing-shell-profile][Sourcing shell profile]]
  - [[#default-shell][Default shell]]
  - [[#shell-history][Shell history]]
- [[#selectrum][Selectrum]]
- [[#ivy-counsel][Ivy Counsel]]
- [[#vertico][Vertico]]
- [[#which-key][Which key]]
- [[#dired][Dired]]
  - [[#sort-directories-first][Sort directories first]]
- [[#magit][magit]]
- [[#yasnippets][yasnippets]]
  - [[#tex][TeX]]
- [[#backup-files][backup files]]
- [[#other-customizations][Other customizations]]
  - [[#change-yes-or-no-p-to-y-or-no-p][Change 'yes-or-no-p' to 'y-or-no-p']]
- [[#custom-commands][Custom commands]]
- [[#org-mode][org-mode]]
  - [[#org-babel][org-babel]]
  - [[#org-agenda][org agenda]]
  - [[#org-modern][org-modern]]
  - [[#org-appointment][org appointment]]
  - [[#hide-emphasis-markup][Hide emphasis markup]]
  - [[#change-bullets-in-list][Change bullets in list]]
  - [[#org-bullets][org-bullets]]
  - [[#setting-visual-line-mode][setting visual line mode]]
  - [[#increase-latex-font-scale][Increase latex font scale]]
  - [[#org-toc][org-toc]]
  - [[#org-tree-slide][org-tree-slide]]
  - [[#perfect-margin][perfect margin]]
- [[#auth-source][Auth Source]]
- [[#set-unicode][set unicode]]
- [[#download-from-url][download from url]]
- [[#search-arxiv][Search arxiv]]
- [[#fix-terminal-display][fix terminal display]]
- [[#markdown-toc][Markdown toc]]
- [[#bgt][bgt]]
- [[#mu-for-email-management][mu for email management]]
  - [[#installing-mu][Installing mu]]
  - [[#set-mu-and-mu4e-path][set mu and mu4e path]]
  - [[#create-and-set-necessary-mail-directories][create and set necessary mail directories]]
  - [[#initialize-the-mail-store][Initialize the mail store]]
  - [[#download-your-emails-using-mbsync][download your emails using mbsync]]
  - [[#additional-settings][Additional settings]]
  - [[#mu4e-alert][mu4e alert]]
  - [[#sending-emails][Sending emails]]
- [[#soccer][soccer]]
- [[#package-lint][package-lint]]
- [[#gpg2-on-mac][gpg2 on mac]]
- [[#dash-for-list-manipulation][dash for list manipulation]]
- [[#ht-for-hash-tables][ht for hash tables]]
- [[#generate-custom-email][generate custom email]]
- [[#expenses-for-expense-tracking][Expenses for expense tracking]]
- [[#elfeed][Elfeed]]
- [[#crdt][CRDT]]
- [[#bn][bn]]
- [[#tab-bar-mode][Tab-bar-mode]]
- [[#mode-line][Mode line]]
- [[#popup-menu][popup-menu]]
- [[#keycast][keycast]]
- [[#yaml-mode][yaml mode]]
- [[#f][f]]
- [[#forex][forex]]
- [[#bibretrive][bibretrive]]
- [[#inspirehep][inspirehep]]
- [[#set-column-width][Set column width]]
- [[#aps-status][aps status]]
- [[#gnuplot][gnuplot]]

* straight
[[https://github.com/raxod502/straight.el#features][straight]] is one-stop package manager for emacs packages. No need to
list the package archives. It is taken care of automatically. You can
use ~use-package~ by adding ~:straight t~ to tell emacs to download
and install packages using ~straight~. Have look at the project page
on github fot more info.

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
* use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC
* load-file if found
Emacs stops loading init file if it does not find a file which is
supposed to be loaded. To continue the loading emacs without fail we
can first check if the files exists or not and load only if they
exist.
#+BEGIN_SRC emacs-lisp
  (defun arif/load-file (file-name)
    (if (file-exists-p file-name)
	(load-file file-name)
      (message (format "%s file not found" file-name))))
#+END_SRC
* Tramp
I use tramp to access my remote machines files and directories. I use
them to directory edit files and look at some figures. One can also
use remote shell using tramp. To make the process smooth I list my
pairs of machine name and the host name in a local file which is
loaded at the start and then I use a custom function to invoke tramp
which asks for the machine name.
** Connect Remote Machines
#+BEGIN_SRC emacs-lisp
  (setq tramp-histfile-override nil)
  (arif/load-file (if (eq system-type 'windows-nt)
		      "c:/Users/mdari/.config/emacs/remote-machines.el"
		      "~/.config/emacs/remote-machines.el"))
  (defun arif/connect-remote-dir ()
    "Connect to REMOTE-MACHINE-NAME."
    (interactive)
    (let* ((remote-machine-name (completing-read "remote machine: " remote-machine-names))
	   (remote-user-name (cdr (assoc remote-machine-name remote-user-names))))
      (set-buffer (dired (format "/sshx:%s/" remote-user-name)))
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path)))

  (defun arif/connect-remote-shell ()
    "Connect to REMOTE-MACHINE-SHELL."
    (interactive)
    (let* ((remote-machine-name (completing-read "remote machine: " remote-machine-names))
	   (remote-user-name (cdr (assoc remote-machine-name remote-user-names)))
	   (remote-shell-type (cdr (assoc remote-machine-name remote-shell-names)))
	   (default-directory (format "/sshx:%s/" remote-user-name)))
      (setq explicit-shell-file-name remote-shell-type)
      (shell)))

  (global-set-key (kbd "C-c r d") #'arif/connect-remote-dir)
  (global-set-key (kbd "C-c r s") #'arif/connect-remote-shell)
#+END_SRC
* UI customization 
** Themes
*** doom-themes
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
	:straight t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-one t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)

	;; Enable custom neotree theme (all-the-icons must be installed!)
	(doom-themes-neotree-config)
	;; or for treemacs users
	(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	(setq doom-themes-treemacs-enable-variable-pitch nil)
	(doom-themes-treemacs-config)

	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
    #+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :straight t
    :ensure t
    :if (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin)))
    )
  (use-package all-the-icons-dired
    :straight t
    :ensure t
    :if (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin)))
    :hook
    (dired-mode . (lambda ()
		    (interactive)
		    (unless (file-remote-p default-directory)
		      (all-the-icons-dired-mode)))))
#+END_SRC
  Don't forget to install fonts using 
  ~M-x all-the-icons-install-fonts~
#+BEGIN_SRC emacs-lisp
  (if (or (eq system-type 'windows-nt) (eq system-type 'cygwin))
      (progn
	(set-language-environment "UTF-8")
	(set-default-coding-systems 'utf-8)))
#+END_SRC

** Font size
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :font "Fira Code";;"JetBrains Mono"
		      :weight 'normal
		      :height (cond ((string-equal system-type "gnu/linux") 115)
				    ((string-equal system-type "darwin") 130)
				    (t 100)))
#+END_SRC
** Bengali font
   #+BEGIN_SRC emacs-lisp
     ;; font download from https://ekushey.org/font/ekushey-kolom/
     ;;(set-face-font 'default "fontset-default")
     (set-fontset-font "fontset-default" 'bengali
		       (font-spec :family "Ekushey Bangla Kolom";;"SolaimanLipi"
				  :size (cond ((string-equal system-type "darwin") 14)
					      ((string-equal system-type "gnu/linux") 18)
					      (t 14))))
     (setq default-input-method "bengali-itrans")
   #+END_SRC
** cusor
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type 'bar)
   #+END_SRC

** doom-modeline
Currenly does not play well with my custom tab-bar
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package doom-modeline
    :straight t
    :ensure t
    :config
    ;; Configure doom-modeline variables
    (setq find-file-visit-truename t)
    (setq doom-modeline-bar-width 3)
    (setq doom-modeline-height 10)
    (setq doom-modeline-buffer-file-name-style 'file-name)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-minor-modes nil)
    ;;(setq doom-modeline-github t)
    ;;(setq doom-modeline-github-interval (* 30 60))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-icon (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin))))
    (setq doom-modeline-env-version t)
    ;;(if (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin)))
    ;;    (setq doom-modeline-minor-modes nil)
    ;;  (setq doom-modeline-minor-modes t))
    ;; (setq doom-modeline-minor-modes t)
    ;;(setq doom-modeline-mu4e t)
    (setq doom-modeline-buffer-encoding nil)
    (setq lsp-modeline-diagnostics-enable nil)
    )
#+END_SRC
** Rainbow delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :after (prog-mode)
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :config
    (set-face-attribute 'hl-line nil :inherit nil :foreground 'unspecified)
    (global-hl-line-mode 1))
#+END_SRC
** Linum mode
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%4d \u2502 ")
  (add-hook 'python-mode-hook 'linum-mode)
  ;;(setq display-line-numbers 'relative)
#+END_SRC
** Autopair
#+BEGIN_SRC emacs-lisp
  (use-package autopair
    :straight t)
  (autopair-global-mode)
#+END_SRC
* convert-timezone
Often I need to quickly convert times between different time-zones due
to meetings schedules at different parts of the world. I call my package
[[https://github.com/md-arif-shaikh/tzc][tzc]] to convert the time to my local one.
#+BEGIN_SRC emacs-lisp
  (use-package tzc
    :straight (tzc :type git :host github :repo "md-arif-shaikh/tzc")
    :config
    (setq tzc-favourite-time-zones-alist '(("Asia/Kolkata" "Kolkata")
					   ("Asia/Seoul" "Seoul")
					   ("Europe/Berlin" "Berlin")
					   ("Europe/London" "London")
					   ("America/New_York" "New_York"))))
#+END_SRC
* Pyenv
I use different conda environments for different projects. This makes
easy to change the conda environments.
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :straight t
    :defer
    :config
    (setenv "WORKON_HOME" "~/miniconda3/envs/")
    (pyvenv-mode 1)
    (pyvenv-tracking-mode 1))
#+END_SRC
* Auctex 
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :after (tex)
    :config
    (setq-default latex-run-command "pdflatex")
    (setq TeX-source-correlate-mode t
	  TeX-source-correlate-method 'synctex
	  TeX-source-correlate-start-server t
	  TeX-auto-save t
	  TeX-parse-self t
	  reftex-plug-into-AUCTeX t
	  TeX-view-program-list
	  '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")
	    ("Evince" "evince --page-index=%(outpage) %o"))
	  )
    (if (string-equal system-type "darwin")
	(setq TeX-view-program-selection '((output-pdf "Skim")))
      (setq TeX-view-program-selection '((output-pdf "Evince"))))
    (add-hook 'TeX-after-compilation-finished-functions
	      #'TeX-revert-document-buffer)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(reftex-mode t)
		(flyspell-mode t)))
    (add-hook 'latex-mode-hook 'turn-on-reftex)
    (when (string-equal system-type "darwin")
      (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))
      (setq exec-path (append exec-path '("/Library/TeX/texbin/")))
      (setq pdf-info-epdfinfo-program "~/.emacs.d/straight/build/pdf-tools/build/server/epdfinfo"))
    (eval-after-load 'tex-mode
      '(define-key latex-mode-map (kbd "C-c C-g") 'pdf-sync-forward-search))
    :hook
    (LaTeX-mode . linum-mode)
    (LaTeX-mode . rainbow-delimiters-mode))
#+END_SRC
* pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :if (display-graphic-p)
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-view-use-scaling t) ;; To increase the sharpness in retina display
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
    (setq pdf-sync-minor-mode t)
    (define-key pdf-view-mode-map (kbd "C-c C-g") 'pdf-sync-forward-search)
    ;;(add-hook 'pdf-view-mode-hook (lambda ()
    ;;				  (bms/pdf-midnite-amber))) ; automatically turns on midnight-mode for pdfs
    )
#+END_SRC
* LSP 
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :straight t)
#+END_SRC
** setup gc-cons-threshld
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000
	read-process-output-max (* 1024 1024)
	treemacs-space-between-root-nodes nil
	company-idle-delay 0.0
	company-minimum-prefix-length 1
	lsp-idle-delay 0.1)  ;; clangd is fast
#+END_SRC
* Python
** Python with LSP
#+BEGIN_SRC shell :tangle no
  pip install --user "python-language-server[all]"
#+END_SRC
*** with lsp-python-ms
https://emacs-lsp.github.io/lsp-python-ms/
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms 
    :straight t
    :init
    (setq
     lsp-python-ms-auto-install-server t
     lsp-python-ms-executable (executable-find "python-language-server"))
    :hook
    (python-mode . (lambda ()
			   (require 'lsp-python-ms)
			   (lsp-deferred)))
    (python-mode . linum-mode))
#+END_SRC
*** with py-right
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package lsp-pyright
    :straight t
    :hook (python-mode . (lambda ()
			    (require 'lsp-pyright)
			    (lsp-deferred))))  ; or lsp-deferred
#+END_SRC
** LSP python with tramp
   Along with the following configuration, the path to the ~python-language-server~ executable
   must be set in the ~.profile~ in the remote machine.
   #+BEGIN_SRC emacs-lisp
     (lsp-register-client
      (make-lsp-client :new-connection (lsp-tramp-connection "pyls")
		       :major-modes '(python-mode)
		       :remote? t
		       :server-id 'pyls-remote))
     (require 'tramp)
     (add-to-list 'tramp-remote-path '"~/miniconda3/bin/")
   #+END_SRC
** Python with elpy
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package elpy
    :straight t
    :defer t
    :config
    (advice-add 'python-mode :before 'elpy-enable)
    (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
    (flymake-mode)
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    :hook (python-mode . linum-mode)
    )
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package highlight-indent-guides
    :straight t
    :defer t
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (global-flycheck-mode)
    (setq flycheck-indication-mode 'left-fringe)
    (setq-default flycheck-disabled-checkers '(python-pylint))
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-jedi
    :straight t
    :defer)
#+END_SRC
* Racket
  #+BEGIN_SRC emacs-lisp
    (use-package racket-mode
      :straight t)
  #+END_SRC
* jupyter
  #+BEGIN_SRC emacs-lisp
    (use-package jupyter
      :straight t)
  #+END_SRC
* LaTeX with LSP
*** Install texlab
#+BEGIN_SRC shell
  cargo install --git https://github.com/latex-lsp/texlab.git
#+END_SRC
*** Install lsp-latex
#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package
   '(lsp-latex :type git :host github :repo "ROCKTAKEY/lsp-latex"))
#+END_SRC
*** Configuration
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'lsp-latex)
  (setq lsp-latex-texlab-executable "~/.cargo/bin/texlab"
	lsp-latex-forward-search-after t
	lsp-latex-forward-search-executable "evince"
	lsp-latex-forward-search-args '("-i" "%l" "%p")
	tex-command "pdflatex --synctex=1")

  (with-eval-after-load "tex-mode"
    (add-hook 'latex-mode-hook 'lsp)
    (add-hook 'tex-mode-hook 'lsp)
    (define-key latex-mode-map (kbd "C-c C-c") 'lsp-latex-build)
    (define-key latex-mode-map (kbd "C-c C-v") 'lsp-latex-forward-search))

  ;; For bibtex
  (with-eval-after-load "bibtex"
    (add-hook 'bibtex-mode-hook 'lsp))
#+END_SRC
* Clean Latex
#+BEGIN_SRC emacs-lisp
  (arif/load-file "~/.emacs.d/lisp/clean-latex.el")
#+END_SRC
* Julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :straight t
    :defer
    :hook (julia-mode . linum-mode))
#+END_SRC
* Rust
  #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :straight t
      :config
      (add-hook 'rust-mode-hook
		(lambda () (setq indent-tabs-mode nil)))
      (setq rust-format-on-save t)
      (define-key rust-mode-map (kbd "C-c C-c") 'rust-run))
  #+END_SRC
* Company autocompletion
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :defer
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t)
  )
#+END_SRC
* Shell mode 
** Disable company
Company mode in remote shell causes commands to hang. So let's just
disable company mode in remote shell
#+BEGIN_SRC emacs-lisp
  (defun arif/shell-mode-setup () 
    (when (and (fboundp 'company-mode)
	       (file-remote-p default-directory))
      (company-mode -1)))
  (add-hook 'shell-mode-hook #'arif/shell-mode-setup)
#+END_SRC
** Sourcing shell profile
I use zsh/bash shells on my remote machines. Tramp by default does not
source the profile files ~.zshrc~ or ~.bashrc~ on the remote
machine. After login on the remote shell I execute ~/bin/zsh~ or
~/bin/bash~ to source the ~.zshrc/.bashrc~ files.
** Default shell
#+BEGIN_SRC emacs-lisp :tangle no
  (setq-default explicit-shell-file-name "/usr/bin/fish")
#+END_SRC
** Shell history
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :straight t
       :custom
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-env "HISTFILE"))

     (defun turn-on-comint-history (history-file)
       (setq comint-input-ring-file-name history-file)
       (comint-read-input-ring 'silent))

     (add-hook 'shell-mode-hook
	       (lambda ()
		 (turn-on-comint-history (getenv "HISTFILE"))))

     (add-hook 'kill-buffer-hook #'comint-write-input-ring)
     (add-hook 'kill-emacs-hook
	       (lambda ()
		 (--each (buffer-list)
		   (with-current-buffer it (comint-write-input-ring)))))

     (use-package savehist
       :custom
       (savehist-file "~/.emacs.d/savehist")
       (savehist-save-minibuffer-history t)
       (history-length 10000)
       (savehist-additional-variables
	'(shell-command-history))
       :config
       (savehist-mode +1))
   #+END_SRC
* Selectrum
#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package 'selectrum)
  (selectrum-mode +1)
  (straight-use-package 'selectrum-prescient)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1)
#+END_SRC
* Ivy Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight t
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t
	  ivy-count-format "(%d/%d) ")
    ;;(setq ivy-extra-directories nil)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer))
#+END_SRC
* Vertico
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Copied from Vertico source page https://github.com/minad/vertico
  ;; Enable vertico
  (use-package vertico
    :straight t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :config
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is
    ;; triggered.
    (setq which-key-idle-delay 1)
    ;;(setq which-key-idle-secondary-delay 0.01)
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :after (dired)
  :config
  (setq dired-omit-verbose nil
        dired-omit-files
        (concat dired-omit-files "\\|^\\..+$"))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+END_SRC
** Sort directories first
   #+BEGIN_SRC emacs-lisp
     (defun mydired-sort ()
       "Sort dired listings with directories first."
       (save-excursion
	 (let (buffer-read-only)
	   (forward-line 2) ;; beyond dir. header 
	   (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
	 (set-buffer-modified-p nil)))

     (defadvice dired-readin
	 (after dired-after-updating-hook first () activate)
       "Sort dired listings with directories first before adding marks."
       (mydired-sort))
   #+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :defer
    :bind ("C-x g" . magit-status))
#+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :defer
    :init
    (add-hook 'after-init-hook 'yas-global-mode)
    :config
    (global-set-key (kbd "C-c y y") 'yas-expand))

  (defun my-org-latex-yas ()
  ;;  "Activate org and LaTeX yas expansion in org-mode buffers."
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'my-org-latex-yas)

  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

  (defun arif/latex-greek-symbols (english-symbol)
    (interactive)
    (defvar arif/greek-symbols)
    (setq arif/greek-symbols '(("a" . "\\alpha")
			       ("b" . "\\beta")
			       ("c" . "\\chi")
			       ("d" . "\\delta")
			       ("D" . "\\Delta")
			       ("e" . "\\epsilon")
			       ("f" . "\\phi")
			       ("F" . "\\Phi")
			       ("g" . "\\gamma")
			       ("G" . "\\Gamma")
			       ("i" . "\\iota")
			       ("k" . "\\kappa")
			       ("l" . "\\lambda")
			       ("L" . "\\Lambda")
			       ("m" . "\\mu")
			       ("n" . "\\nu")
			       ("o" . "\\omega")
			       ("O" . "\\Omega")
			       ("p" . "\\pi")
			       ("P" . "\\Pi")
			       ("r" . "\\rho")
			       ("s" . "\\sigma")
			       ("t" . "\\tau")
			       ("x" . "\\xi")
			       ("ve" . "\\varepsilon")
			       ("vp" . "\\varphi"))
	  )
    (cdr (assoc english-symbol arif/greek-symbols))
    )
#+END_SRC
** TeX
*** Environments
Keys for environments starts with ~e~ and then the first two alphabets of the environment name.
|-------------+-----|
| Environment | Key |
|-------------+-----|
| Equation    | eeq |
|-------------+-----|
| Enumerate   | een |
|-------------+-----|
| Itemize     | eit |
|-------------+-----|
| Align       | eal |
|-------------+-----|
*** Text 
Keys for texts starts with ~@~ and then first alphabet of the desired face/shape
| Text      | Key |
|-----------+-----|
| Bold      | @b  |
|-----------+-----|
| Italic    | @i  |
|-----------+-----|
| Underline | @u  |
|-----------+-----|
*** Greek symbols
Keys for greek symbols works a little bit differently. First we hit ~@ + TAB~ then enter equivalent english alphabet.
For example ~@ + TAB + a~ will give ~\alpha~.
* backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
* Other customizations
** Change 'yes-or-no-p' to 'y-or-no-p'
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Custom commands
#+BEGIN_SRC emacs-lisp
  (arif/load-file (if (eq system-type 'windows-nt)
		      "c:/Users/mdari/.config/emacs/custom-commands.el"
		      "~/.config/emacs/custom-commands.el"))
  (arif/load-file "~/.config/emacs/teamspeak.el")
#+END_SRC
* org-mode
** org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))
#+END_SRC
** org agenda
  #+BEGIN_SRC emacs-lisp
  (defvar arif/org-capture-file-name)

  (defun arif/org-catpure ()
    (interactive)
    (setq arif/org-capture-file-name (expand-file-name (read-file-name "Capture entry in file: " "~/Dropbox/org/")))
    (call-interactively #'org-capture))

  (use-package org
    :config
    (global-set-key (kbd "C-c a") 'org-agenda)
    (setq org-agenda-files (if (eq system-type 'windows-nt)
			       '("c:/Users/mdari/Dropbox/org")
			       '("~/Dropbox/org" "~/Dropbox/org/roam")))
    ;; Basic setup
    (setq org-agenda-span 7)
    (setq org-agenda-start-day "+0d")
    (setq org-agenda-start-on-weekday nil)
    ;; Items with deadline and scheduled timestamps
    (setq org-agenda-include-deadlines t)
    (setq org-deadline-warning-days 28)
    (setq org-agenda-skip-scheduled-if-done nil)
    ;;(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
    ;;(setq org-agenda-skip-timestamp-if-deadline-is-shown t)
    (setq org-agenda-skip-deadline-if-done nil)
    ;;(setq org-agenda-skip-deadline-prewarning-if-scheduled 1)
    ;;(setq org-agenda-skip-scheduled-delay-if-deadline nil)
    ;;(setq org-agenda-skip-additional-timestamps-same-entry nil)
    ;;(setq org-agenda-search-headline-for-time t)
    (setq org-scheduled-past-days 14)
    (setq org-deadline-past-days 14)
    ;;(setq org-agenda-move-date-from-past-immediately-to-today t)
    ;;(setq org-agenda-show-future-repeats t)
    ;;(setq org-agenda-prefer-last-repeat nil)
    (setq org-agenda-time-leading-zero t)
    (setq org-agenda-timegrid-use-ampm t)
    (setq org-agenda-use-time-grid t)
    (setq org-agenda-show-current-time-in-grid t)
    (setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(D)" "CANCELLED(C)")
			      (sequence "MEET(m)" "|" "MET(M)" "POSTPONED(P)")
			      (sequence "ATTEND(a)" "|" "ATTENDED(A)" "UNABLE TO ATTEND(U)")
			      (sequence "READ(r)" "|" "FINISHED(F)")
			      (sequence "DISCUSS(d)" "|" "DONE(D)")
			      (sequence "PRESENT(p)" "|" "DONE(D)" "CANCELLED(C)" "PRESENTED(P)")
			      (sequence "WORKSHOP(w)" "|" "DONE(D)")
			      (sequence "CONFERENCE(c)" "|" "DONE(D)")
			      (sequence "SEMINAR(s)" "|" "DONE(D)")
			      (sequence "VISIT(v)" "|" "DONE(D)")
			      (sequence "FOOTBALL(f)" "|" "FINISHED(F)")))
    (setq org-todo-keyword-faces '(("TODO" . (:background "#61afef" :foreground "#282c34" :weight ultra-bold, :height 0.9))
				   ("ATTEND" . (:background "#be5046" :foreground "#282c34" :weight ultra-bold))
				   ("MEET" . (:foreground "#207FA1" :underline t :box nil  :weight extrabold))
				   ("READ" . (:foreground "orange" :underline t :box nil  :weight extrabold))
				   ("DISCUSS" . (:foreground "orange" :underline t :box nil  :weight extrabold))
				   ("WORKSHOP" . (:background "#d19a66" :foreground "#282c34" :weight ultra-bold))
				   ("VISIT" . (:background "#d19a66" :foreground "#282c34" :weight ultra-bold))
				   ("CANCELLED" . ( :foreground "gray50" :underline t :box nil))
				   ("DONE" . ( :foreground "gray50" :underline t :box nil))
				   ("ATTENDED" . ( :foreground "gray50" :underline t :box nil))
				   ("MET" . ( :foreground "gray50" :underline t :box nil))
				   ("POSTPONED" . ( :foreground "gray50" :underline t :box nil))
				   ("FINISHED READING" . ( :foreground "gray50" :underline t :box nil))
				   ("UNABLE TO ATTEND" . ( :foreground "gray50" :underline t))))
    (setq org-capture-templates
	  (append
	   '(("s" "schedule task")
	     ("st" ;; keys
	      "Schedule TODOs" ;; description
	      entry ;; type
	      (file arif/org-capture-file-name) ;;target
	      "* TODO %?\n  SCHEDULED: %T\n" ;; template
	      ;;properties
	      :prepend t)
	     ("sm" ;; keys
	      "Schedule MEETING" ;; description
	      entry ;; type
	      (file arif/org-capture-file-name) ;;target
	      "* MEET %?\n  SCHEDULE: %T\n" ;; template
	      ;;properties
	      :prepend t)
	     ("sa" ;; keys
	      "Schedule ATTENDANCE" ;; description
	      entry ;; type
	      (file arif/org-capture-file-name) ;;target
	      "* ATTEND %?\n  SCHEDULE: %T\n" ;; template
	      ;;properties
	      :prepend t)
	     ("sw" ;; keys
	      "Schedule WORKSHOP" ;; description
	      entry ;; type
	      (file arif/org-capture-file-name) ;;target
	      "* WORKSHOP %?\n  SCHEDULED: %T\n" ;; template
	      ;;properties
	      :prepend t))
	   '(("d" "Set deadline for task")
	     ("dt" ;; keys
	      "Set Deadline for TODOs" ;; description
	      entry ;; type
	      (file arif/org-capture-file-name) ;;target
	      "* TODO %?\n  DEADLINE: %T\n" ;; template
	      ;;properties
	      :prepend t))))
    (setq org-agenda-prefix-format 
	  '((agenda . "  %-15t%12s")
	    (todo . "  %-12t%12s"))
	  org-agenda-time-grid '((daily today remove-match)
				 (0900 1100 1300 1500 1700)
				 " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
	  org-agenda-current-time-string
	  "⭠ এখন ─────────"))
  #+END_SRC
** org-modern
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :straight t
    :config
    (setq
     ;; Agenda styling
     ;; to-do face. Colors from https://github.com/joshdick/onedark.vim/blob/main/colors/onedark.vim
     org-modern-todo-faces '(("ATTEND" :background "#be5046" :foreground "#282c34" :weight ultra-bold)
			     ("WORKSHOP" :background "#d19a66" :foreground "#282c34" :weight ultra-bold)
			     ("TODO" :background "#61afef" :foreground "#282c34" :weight ultra-bold)
			     ("FOOTBALL" :background "#c678dd" :foreground "#282c34" :weight ultra-bold))
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today remove-match)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     (format "⭠ %s ─────────" "এখন"))
    (custom-set-faces '(org-agenda-current-time-string face--org-time-now))
    (global-org-modern-mode))
#+END_SRC
** org appointment
   #+BEGIN_SRC emacs-lisp
     (require 'appt)
     (setq appt-time-msg-list nil)    ;; clear existing appt list
     (setq appt-display-interval '10) ;; warn every 10 minutes from t - appt-message-warning-time
     (setq
      appt-message-warning-time '30  ;; send first warning 10 minutes before appointment
      appt-display-mode-line t     ;; don't show in the modeline
      appt-display-format 'window)   ;; pass warnings to the designated window function
     (appt-activate 1)                ;; activate appointment notification
     (display-time)                   ;; activate time display

     (org-agenda-to-appt)             ;; generate the appt list from org agenda files on emacs launch
     (run-at-time "24:01" 3600 'org-agenda-to-appt)           ;; update appt list hourly
     (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt) ;; update appt list on agenda view

     ;; set up the call to terminal-notifier
     (defvar my-notifier-path 
       (cond ((string-equal system-type "gnu/linux") "/usr/bin/notify-send")
	     ((string-equal system-type "darwin") "/usr/local/bin/terminal-notifier")))  ;; path to libnotify binary notify-send
     (defun my-appt-send-notification (msg)
       (shell-command (concat my-notifier-path " -t" " 0 " " -i" " ~/.emacs.d/icons/emacs.png "  msg))) ;; see notify-send help to understand the options

     ;; designate the window function for my-appt-send-notification
     (defun my-appt-display (min-to-app new-time msg)
       (my-appt-send-notification 
	(format "'Appointment in %s minutes\n %s'" min-to-app msg)))
     (setq appt-disp-window-function (function my-appt-display))
   #+END_SRC
** Hide emphasis markup
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC
** Change bullets in list
   #+BEGIN_SRC emacs-lisp
     (font-lock-add-keywords 'org-mode
			     '(("^ *\\([-]\\) "
				(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
   #+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** setting visual line mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
** Increase latex font scale
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** org-toc
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'toc-org)
  (if (require 'toc-org nil t)
      (add-hook 'org-mode-hook 'toc-org-mode)
    (warn "toc-org not found"))
#+END_SRC
** org-tree-slide
#+BEGIN_SRC emacs-lisp
  (use-package org-tree-slide
    :straight t
    :custom
    (org-image-actual-width nil))
#+END_SRC
** perfect margin
#+BEGIN_SRC emacs-lisp
  (use-package perfect-margin
    :straight t)
#+END_SRC
* Auth Source
#+BEGIN_SRC emacs-lisp
  (setq auth-sources
	'((:source "~/.config/emacs/.authinfo.gpg")))
#+END_SRC
* set unicode
  #+BEGIN_SRC emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;
    ;;; set up unicode
    (prefer-coding-system       'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
    (set-terminal-coding-system 'utf-8-unix)
    (set-keyboard-coding-system 'utf-8)
    (setq-default buffer-file-coding-system 'utf-8)                      
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  #+END_SRC  
* download from url
  #+BEGIN_SRC emacs-lisp
    (arif/load-file "~/.emacs.d/lisp/download-url.el")
  #+END_SRC
* Search arxiv
#+BEGIN_SRC emacs-lisp
  (arif/load-file "~/.emacs.d/lisp/arxiv-search.el")
#+END_SRC
* fix terminal display
I have been struggling with displaying the symbols used in the
~oh-my-zsh~ theme in the terminal buffer inside emacs invoked through
~M-X term~ even after setting the unicode system. The following adivice
to the ~term~ function solved the issue. See more in the discussion
https://stackoverflow.com/questions/6820051/unicode-characters-in-emacs-term-mode 
#+BEGIN_SRC emacs-lisp :tangle no
  (defadvice term (after advise-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (ad-activate 'term)
#+END_SRC

* Markdown toc
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-toc
      :straight t)
  #+END_SRC

* bgt
  keep records of your BG level
  #+BEGIN_SRC emacs-lisp
    (use-package bgt
      :straight (bgt :type git :host github :repo "md-arif-shaikh/bgt")
      :config
      (setq bgt-file-name "~/Dropbox/org/bgt.org")
      (setq bgt-csv-file-name "~/Dropbox/org/bgt.csv")
      (setq bgt-python-file "~/bgt/bgt.py")
      (setq bgt-python-path "~/miniconda3/envs/emacs/bin/python"))
  #+END_SRC

* mu for email management
** Installing mu
   - The latest release of mu can be downloaded from [[https://github.com/djcb/mu/releases][here]].
   - Extract the tar.xz file using ~tar -xvf mu-1.6.6.tar.xz~
   - ~./configure~ inside the extracted directory.
   - ~make~
     It might complain about few packages like ~gmime~ and ~xapian~ if it's not already
 installed. These are available in the software repositories and could be installed easily.
 For example, on ubuntu, you can use
   - ~sudo apt install libxapian-dev~
   - ~sudo apt install libgmime-3.0-dev~

 for ~fedora~ you need to do the following
   - c++ compiler: ~sudo dnf install gcc-c++~
   - glib: ~sudo dnf install glib2-devel~
   - gmime: ~sudo dnf install gmime30-devel~
   - xapian: ~sudo dnf install xapian-core-devel~
   - texinfo: ~sudo dnf install texinfo~
** set mu and mu4e path
   #+BEGIN_SRC emacs-lisp :tangle no
     (add-to-list 'load-path "~/Downloads/mu-1.6.6/mu4e")
     (setq mu4e-mu-binary "~/Downloads/mu-1.6.6/mu/mu")
     (require 'mu4e)
   #+END_SRC
** create and set necessary mail directories
   #+BEGIN_SRC emacs-lisp
     (setq mu4e-maildir       "~/Maildir"   ;; top-level Maildir
	   ;; note that these folders below must start with /
	   ;; the paths are relative to maildir root
	   mu4e-sent-folder   "/Sent"
	   mu4e-drafts-folder "/Drafts"
	   mu4e-trash-folder  "/Trash")
   #+END_SRC
** Initialize the mail store
   execute the following command in the terminal to initialize the mail directory with emails
   #+BEGIN_SRC shell
     Downloads/mu-1.6.6/mu/mu init --maildir=~/Maildir/ --my-address arifshaikh.astro@gmail.com
   #+END_SRC
   Now index the emails using
   #+BEGIN_SRC shell
     Downloads/mu-1.6.6/mu/mu index
   #+END_SRC
** download your emails using mbsync
   Install ~isync~ which provides ~mbsync~ using ~sudo apt install isync.~ ~mbsync~ might complain
   about ~curl-ca-bundle.crt~. This file can be generated in the following way.
   - Download certificate in ~.pem~ format using ~curl --remote-name --time-cond cacert.pem https://curl.se/ca/cacert.pem~
   - You can then convert it to ~.crt~ using ~openssl x509 -in cacert.pem -out curl-ca-bundle.crt.~
   #+BEGIN_SRC emacs-lisp
     (setq mu4e-get-mail-command  "mbsync -a")
     (setq mu4e-update-interval (* 5 60))
     ;; run in the background
     (setq mu4e-index-update-in-background t)
     ;; update when new mail arrives the headers
     (setq mu4e-headers-auto-update t)
   #+END_SRC
** Additional settings
   #+BEGIN_SRC emacs-lisp
     (setq mue4e-headers-skip-duplicates  t
	   mu4e-view-show-images t
	   mu4e-view-show-addresses t
	   mu4e-compose-format-flowed t
	   mu4e-date-format "%y/%m/%d"
	   mu4e-headers-date-format "%Y/%m/%d"
	   mu4e-change-filenames-when-moving t
	   mu4e-index-cleanup t
	   mu4e-index-lazy-check nil
	   mu4e-attachments-dir "~/Downloads"
	   user-mail-address "arifshaikh.astro@gmail.com"
	   user-full-name "Md Arif Shaikh"
	   mu4e-compose-signature
	   (concat
	    "Md Arif Shaikh\n"
	    "Postdoctoral Fellow, ICTS-TIFR\n"
	    "https://md-arif-shaikh.github.io\n"))
   #+END_SRC
** mu4e alert
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package mu4e-alert
       :straight t
       :config
       (mu4e-alert-set-default-style 'libnotify)
       (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
       (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
       (setq mu4e-alert-enable-mode-line-display t)
       (setq mu4e-alert-enable-notifications t))
   #+END_SRC

** Sending emails
   #+BEGIN_SRC emacs-lisp
     (setq message-send-mail-function 'smtpmail-send-it
	  smtpmail-stream-type 'starttls
	  smtpmail-default-smtp-server "smtp.gmail.com"
	  smtpmail-smtp-server "smtp.gmail.com"
	  smtpmail-smtp-service 587
	  mu4e-sent-messages-behavior 'delete)
   #+END_SRC

* soccer
  getting my soccer fix using my package called [[https://github.com/md-arif-shaikh/soccer][soccer]]
  #+BEGIN_SRC emacs-lisp
    (use-package soccer
      :straight (soccer :type git :host github :repo "md-arif-shaikh/soccer")
      :init
      (setq soccer-leagues-alist
	      '(("England" . "Premier League")
		("Spain" . "Laliga")
		("France" . "Ligue 1")
		("Italy" . "Serie A")
		("Germany" . "Bundesliga")
		("uefa" . "Champions League")
		;;("England" . "Championship")
		))
      :config
      (setq soccer-time-local-time-utc-offset "+0900")
      :bind (("C-c s f" . soccer-fixtures-next)
	     ("C-c s r" . soccer-results-last)
	     ("C-c s s" . soccer-scorecard)
	     ("C-c s t" . soccer-table)))
  #+END_SRC

* package-lint
  #+BEGIN_SRC emacs-lisp
    (use-package package-lint
      :straight t)
  #+END_SRC

* gpg2 on mac
  #+BEGIN_SRC emacs-lisp
    (when (string-equal system-type "darwin")
      (require 'epa-file)
      (custom-set-variables '(epg-gpg-program  "/opt/local/bin/gpg2"))
      (epa-file-enable))
  #+END_SRC

* dash for list manipulation
  #+BEGIN_SRC emacs-lisp
    (use-package dash
      :straight t)
  #+END_SRC

* ht for hash tables
  #+BEGIN_SRC emacs-lisp
    (use-package ht
      :straight t)
  #+END_SRC

* generate custom email
#+BEGIN_SRC emacs-lisp
  (arif/load-file "~/.emacs.d/lisp/lunch-paper.el")
#+END_SRC

* Expenses for expense tracking
  #+BEGIN_SRC emacs-lisp
    (use-package expenses
      :straight (expenses :type git :host github :repo "md-arif-shaikh/expenses")
      :config
      (setq expenses-category-list '("Grocery" "Food" "Shopping" "Travel" "Subscription" "Health" "Electronics" "Entertainment" "Rent" "Salary" "Gas" "Cofee" "Others")
	    expenses-directory "~/Dropbox/Important_Works/Expenses/Monthly_expenses/"
	    expenses-python-path "~/miniconda3/bin/python3")
      :bind (("C-c e a" . expenses-add-expense)
	     ("C-c e v" . expenses-view-expense)
	     ("C-c e y" . expenses-calc-expense-for-year)
	     ("C-c e m" . expenses-calc-expense-for-month)
	     ("C-c e d" . expenses-calc-expense-for-day)
	     ("C-c e c" . expenses-calc-expense-by-category)))
  #+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :straight t
    :config
    (setq elfeed-feeds
	  '(("https://www.theguardian.com/football/rss"))))
#+END_SRC
* CRDT
#+BEGIN_SRC emacs-lisp
  (use-package crdt
    :straight t)
#+END_SRC

* bn
#+BEGIN_SRC emacs-lisp
    (use-package bn
      :straight (bn :type git :host github :repo "md-arif-shaikh/bn")
      :config
      (setq bn-time-separator ":")
      (setq bn-date-separator "-")
      (setq bn-second-clock-time-zone '("Asia/Kolkata" . "কোলকাতা"))
      (display-time-mode 1)
      (display-battery-mode 1)
      (setq display-time-string-forms bn-display-time-string-forms)
      (advice-add 'battery-update :override #'bn-battery-update)
      (add-hook 'after-change-major-mode-hook 'bn-set-major-mode-name)
      (advice-add 'appt-mode-line :override #'bn-appt-mode-line)
      (advice-add #'vc-git-mode-line-string :filter-return #'bn-vc-git-mode-line-string)
      (force-mode-line-update))
#+END_SRC

* Tab-bar-mode
#+BEGIN_SRC emacs-lisp
  (tab-bar-mode)
  (setq tab-bar-format '(tab-bar-separator tab-bar-format-align-right tab-bar-format-global))
  (set-face-attribute 'tab-bar nil :foreground "#FFFFFF")
  (add-to-list 'global-mode-string "মহঃ আরিফ শেখ ")
  (set-face-attribute 'tab-bar-tab nil :foreground "cyan" :background 'unspecified :bold t :box t)
#+END_SRC
* Mode line
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
		'("-"
		  (:eval (let ((str (if buffer-read-only
					(if (buffer-modified-p) "%%*" "%%%%")
				      (if (buffer-modified-p) (propertize "পরিবর্তিত" 'face 'ivy-modified-buffer) "--"))))
			   str))
		  mode-line-frame-identification
		  mode-line-buffer-identification
		  "   "
		  mode-line-position
		  (vc-mode vc-mode)
		  "   "
		  mode-name
		  (which-function-mode ("" which-func-format "--"))))
#+END_SRC

* popup-menu
#+BEGIN_SRC emacs-lisp
  (use-package popup
    :straight t)
#+END_SRC

* keycast
#+BEGIN_SRC emacs-lisp
  (use-package keycast
    :straight t)
#+END_SRC

* yaml mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t)
#+END_SRC
* f
#+BEGIN_SRC emacs-lisp
  (use-package f
    :straight t)
#+END_SRC
* forex
#+BEGIN_SRC emacs-lisp
  (use-package forex
    :straight (forex :type git :host github :repo "md-arif-shaikh/forex"))
#+END_SRC

* bibretrive
#+BEGIN_SRC emacs-lisp
  (use-package bibretrieve
    :straight (bibretrieve :type git :host github :repo "duetosymmetry/bibretrieve"))
#+END_SRC

* inspirehep
#+BEGIN_SRC emacs-lisp
  (use-package inspirehep
    :straight (inspirehep :type git :host github :repo "aikrahguzar/inspirehep.el"))
#+END_SRC

* Set column width
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
  #+END_SRC

* aps status
#+BEGIN_SRC emacs-lisp
  (use-package aps-status
    :straight (aps-status :type git :host github :repo "md-arif-shaikh/aps-status"))
#+END_SRC
* gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :straight t)
#+END_SRC
