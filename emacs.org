#+TITLE: Emacs config file
#+AUTHOR: Md Arif Shaikh
#+Email: arifshaikh.astro@gmail.com
#+Date: Thu Feb 25 08:11:11 PM IST 2021

* Table of Contents                                                     :TOC:
- [[#straight][straight]]
- [[#use-package][use-package]]
- [[#load-file-if-found][load-file if found]]
- [[#tramp][Tramp]]
  - [[#connect-remote-machines][Connect Remote Machines]]
- [[#ui-customization][UI customization]]
  - [[#themes][Themes]]
  - [[#all-the-icons][All the icons]]
  - [[#doom-modeline][doom-modeline]]
  - [[#start-full-screen][Start full screen]]
  - [[#hide-start-up-message][hide start-up message]]
  - [[#remove-scroll-bar-and-toolbar-fringe][remove scroll bar and toolbar, fringe]]
  - [[#rainbow-delimeters][Rainbow delimeters]]
  - [[#show-parens][Show parens]]
  - [[#highlight-current-line][Highlight current line]]
  - [[#linum-mode][Linum mode]]
  - [[#autopair][Autopair]]
  - [[#font-size][Font size]]
  - [[#display-time-in-modeline][Display time in modeline]]
  - [[#battery-status][Battery status]]
- [[#convert-timezone][convert-timezone]]
- [[#pyenv][Pyenv]]
- [[#auctex][Auctex]]
- [[#pdf-tools][pdf-tools]]
- [[#lsp][LSP]]
  - [[#setup-gc-cons-threshld][setup gc-cons-threshld]]
- [[#python][Python]]
  - [[#python-with-lsp][Python with LSP]]
  - [[#lsp-python-with-tramp][LSP python with tramp]]
  - [[#python-with-elpy][Python with elpy]]
- [[#latex-with-lsp][LaTeX with LSP]]
- [[#julia][Julia]]
- [[#jupyter][Jupyter]]
- [[#company-autocompletion][Company autocompletion]]
- [[#shell-mode][Shell mode]]
  - [[#disable-company][Disable company]]
  - [[#sourcing-shell-profile][Sourcing shell profile]]
- [[#selectrum][Selectrum]]
- [[#ivy-counsel][Ivy Counsel]]
- [[#which-key][Which key]]
- [[#dired][Dired]]
  - [[#sort-directories-first][Sort directories first]]
- [[#magit][magit]]
- [[#yasnippets][yasnippets]]
  - [[#tex][TeX]]
- [[#backup-files][backup files]]
- [[#other-customizations][Other customizations]]
  - [[#change-yes-or-no-p-to-y-or-no-p][Change 'yes-or-no-p' to 'y-or-no-p']]
- [[#custom-commands][Custom commands]]
- [[#org-mode][org-mode]]
  - [[#hide-emphasis-markup][Hide emphasis markup]]
  - [[#change-bullets-in-list][Change bullets in list]]
  - [[#org-bullets][org-bullets]]
  - [[#setting-visual-line-mode][setting visual line mode]]
  - [[#increase-latex-font-scale][Increase latex font scale]]
  - [[#org-toc][org-toc]]
  - [[#org-tree-slide][org-tree-slide]]
  - [[#perfect-margin][perfect margin]]
- [[#auth-source][Auth Source]]
- [[#ob-python][ob-python]]
- [[#org-babel][Org babel]]
- [[#set-unicode][set unicode]]

* straight
[[https://github.com/raxod502/straight.el#features][straight]] is one-stop package manager for emacs packages. No need to
list the package archives. It is taken care of automatically. You can
use ~use-package~ by adding ~:straight t~ to tell emacs to download
and install packages using ~straight~. Have look at the project page
on github fot more info.

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
* use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC
* load-file if found
Emacs stops loading init file if it does not find a file which is
supposed to be loaded. To continue the loading emacs without fail we
can first check if the files exists or not and load only if they
exist.
#+BEGIN_SRC emacs-lisp
  (defun arif/load-file (file-name)
    (if (file-exists-p file-name)
	(load-file file-name)
      (message (format "%s file not found" file-name))))
#+END_SRC
* Tramp
I use tramp to access my remote machines files and directories. I use
them to directory edit files and look at some figures. One can also
use remote shell using tramp. To make the process smooth I list my
pairs of machine name and the host name in a local file which is
loaded at the start and then I use a custom function to invoke tramp
which asks for the machine name.
** Connect Remote Machines
#+BEGIN_SRC emacs-lisp
  (arif/load-file "~/.config/emacs/remote-machines.el")
  (defun arif/connect-remote-dir (remote-machine-name)
    "Connect to REMOTE-MACHINE-NAME."
    (interactive "sRemote Machine Name: ")
    (let ((remote-user-name (cdr (assoc remote-machine-name remote-user-names))))
      (set-buffer (dired (format "/sshx:%s:/home/%s/" remote-machine-name remote-user-name)))
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path)))

  (defun arif/connect-remote-shell (remote-machine-name)
    "Connect to terminal in on REMOTE-MACHINE-NAME."
    (interactive "sRemote Machine Name: ")
    (let* ((remote-shell-types '(("comet" . "/bin/bash")
				 ("dodo" . "/bin/zsh")
				 ("cit" . "/bin/bash")))
	   (default-directory (format "/sshx:%s:" remote-machine-name))
	   (tramp-encoding-shell (cdr (assoc remote-machine-name remote-shell-types))))
      (shell)))

  (global-set-key (kbd "C-c r d") #'arif/connect-remote-dir)
  (global-set-key (kbd "C-c r s") #'arif/connect-remote-shell)

#+END_SRC
* UI customization 
** Themes
*** doom-themes
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
	:straight t
	:if (display-graphic-p)
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-one t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)

	;; Enable custom neotree theme (all-the-icons must be installed!)
	(doom-themes-neotree-config)
	;; or for treemacs users
	(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	(setq doom-themes-treemacs-enable-variable-pitch nil)
	(doom-themes-treemacs-config)

	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
    #+END_SRC
*** Gruvbox
#+BEGIN_SRC  emacs-lisp
  (use-package gruvbox-theme
      :straight t
      :if (not (display-graphic-p))
      :init
      (load-theme 'gruvbox-dark-soft t))
#+END_SRC
*** Atom dark one for graphical
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package atom-one-dark-theme
    :straight t
    :if (display-graphic-p)
    :init
    (load-theme 'atom-one-dark t)
    )
#+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :straight t
    :ensure t
    :if (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin)))
    )
  (use-package all-the-icons-dired
    :straight t
    :ensure t
    :if (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin)))
    :hook
    (dired-mode . (lambda ()
		    (interactive)
		    (unless (file-remote-p default-directory)
		      (all-the-icons-dired-mode)))))
#+END_SRC
  Don't forget to install fonts using 
  ~M-x all-the-icons-install-fonts~
#+BEGIN_SRC emacs-lisp
  (if (or (eq system-type 'windows-nt) (eq system-type 'cygwin))
      (progn
	(set-language-environment "UTF-8")
	(set-default-coding-systems 'utf-8)))
#+END_SRC
** doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    ;; Configure doom-modeline variables
    (setq find-file-visit-truename t)
    (setq doom-modeline-bar-width 3)
    (setq doom-modeline-height 10)
    (setq doom-modeline-buffer-file-name-style 'file-name)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-minor-modes nil)
    (setq doom-modeline-github t)
    (setq doom-modeline-github-interval (* 30 60))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-icon (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin))))
    (setq doom-modeline-env-version t)
    (if (and (display-graphic-p) (eq system-type (or 'gnu/linux 'darwin)))
	(setq doom-modeline-minor-modes nil)
      (setq doom-modeline-minor-modes t))
    ;;(setq doom-modeline-mu4e t)
    )
#+END_SRC
** Start full screen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
#+END_SRC
** hide start-up message 
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** remove scroll bar and toolbar, fringe
#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (progn
	(tool-bar-mode -1)
	(scroll-bar-mode -1)
	(menu-bar-mode -1)
	(set-fringe-mode 0)))
  (if (daemonp)
      (setq default-frame-alist (menu-bar-mode -1)))
#+END_SRC
** Rainbow delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :after (prog-mode)
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Linum mode
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%4d \u2502 ")
#+END_SRC
** Autopair
#+BEGIN_SRC emacs-lisp
  (use-package autopair
    :straight t)
  (autopair-global-mode)
#+END_SRC
** Font size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Fira Code" :height 120)
#+END_SRC
** Display time in modeline
   #+BEGIN_SRC emacs-lisp
     (setq display-time-string-forms
	   ;;'((calendar-julian-date-string)))
	   '(day "/" monthname "/" (substring year -2)
		 " " 24-hours ":" minutes
		 (if time-zone " (") time-zone (if time-zone ")")
		 (if mail " Mail" "")
		 )
	   )
     (display-time-mode 1)
   #+END_SRC
** Battery status
   #+BEGIN_SRC emacs-lisp
     (display-battery-mode 1)
   #+END_SRC
* convert-timezone
Often I need to quickly convert times between different time-zones due
to meetings schedules at different parts of the world. I call my customized
simple time converter function to convert the time to my local one.
#+BEGIN_SRC emacs-lisp
  (defun arif/convert-time (from-zone to-zone time-to-convert)
	"Convert TIME from FROM-ZONE to TO-ZONE."
	(interactive "sFrom which timezone (use abbreviation, e.g., EST for Eeastern Standard Time): 
  sTo which timezone (use abbreviation, e.g., IST for Indian Standard Time): 
  sTime to be converted (HH:MM PM/pm(optional) DAY(optional)): ")
	(let* ((time-zones '(("EST" . "-0500")
			     ("CST" . "-0600")
			     ("CDT" . "-0500")
			     ("EET" . "+0200")
			     ("CET" . "+0100")
			     ("IST" . "+0530")
			     ("KOLKATA" . "+0530")
			     ("JST" . "+0900")
			     ("TOKYO" . "+0900")))
	       (days '("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"))
	       (time (parse-time-string time-to-convert))
	       (from-zone-u (upcase from-zone))
	       (to-zone-u (upcase to-zone))
	       (from-sec (nth 0 time))
	       (from-min (nth 1 time))
	       (from-hour (nth 2 time))
	       (from-day (nth 6 time)))
	  (when (string-match-p (regexp-quote "PM") (upcase time-to-convert))
	    (setq  from-hour (+ 12 from-hour)))
	  (let* ((time-shift (- (nth 8 (parse-time-string (cdr (assoc to-zone-u time-zones))))
				(nth 8 (parse-time-string (cdr (assoc from-zone-u time-zones))))))
		 (hour-shift (/ time-shift (* 60 60)))
		 (min-shift (/ (% time-shift (* 60 60)) 60))
		 (to-min (+ from-min min-shift))
		 (to-hour (+ from-hour hour-shift))
		 (to-day-name ""))
	    (when (>= to-min 60)
	      (setq to-min (- to-min 60))
	      (setq to-hour (1+ to-hour)))
	    (cond ((>= to-hour 24) (progn
				     (setq to-hour (- to-hour 24))
				     (if (not (equal from-day nil))
					 (setq to-day-name (nth (1+ from-day) days))
				       (setq to-day-name "+ 1 day"))))		
		  ((< to-hour 0) (progn
				   (setq to-hour (+ 24 to-hour))
				   (if (not (equal from-day nil))
				       (setq to-day-name (nth (1- from-day) days))
				     (setq to-day-name "- 1 day"))))
		  ((and (> to-hour 0) (< to-hour 24)) (if (not (equal from-day nil))
							  (setq to-day-name (nth from-day days))
							(setq to-day-name ""))))
	    (cond ((= to-hour 0) (setq A-or-P "Midnight"))
		  ((< to-hour 12) (setq A-or-P "AM"))
		  ((= to-hour 12) (setq A-or-P "Noon"))
		  ((> to-hour 12) (progn
				     (setq to-hour (- to-hour 12))
				     (setq A-or-P "PM"))))
	    (message (format "%s %s = %.2d:%.2d %s %s %s" (upcase time-to-convert) from-zone-u to-hour to-min (upcase A-or-P) (upcase to-day-name) to-zone-u)))))
#+END_SRC
* Pyenv
I use different conda environments for different projects. This makes
easy to change the conda environments.
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :straight t
    :defer
    :config
    (setenv "WORKON_HOME" "~/miniconda3/envs/")
    (pyvenv-mode 1)
    (pyvenv-tracking-mode 1))
#+END_SRC
* Auctex 
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :after (tex)
    :config
    (setq TeX-source-correlate-mode t
	  TeX-source-correlate-method 'synctex
	  TeX-source-correlate-start-server t
	  TeX-auto-save t
	  TeX-parse-self t
	  reftex-plug-into-AUCTeX t
	  TeX-view-program-list
	  '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")
	    ("Evince" "evince --page-index=%(outpage) %o"))
	  )
    (if (string-equal system-type "darwin")
	(setq TeX-view-program-selection '((output-pdf "Skim")))
      (setq TeX-view-program-selection '((output-pdf "Evince"))))
    (add-hook 'TeX-after-compilation-finished-functions
	      #'TeX-revert-document-buffer)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(reftex-mode t)
		(flyspell-mode t)))
    :hook
    (LaTeX-mode . linum-mode)
    (LaTeX-mode . rainbow-delimiters-mode))
#+END_SRC
* pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :if (display-graphic-p)
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query) 
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-view-use-scaling t) ;; To increase the sharpness in retina display
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
    (setq pdf-sync-minor-mode t)
    ;;(define-key pdf-view-mode-map (kbd "C-c C-g") 'pdf-sync-forward-search)
    ;;(add-hook 'pdf-view-mode-hook (lambda ()
    ;;				  (bms/pdf-midnite-amber))) ; automatically turns on midnight-mode for pdfs
    )
#+END_SRC
* LSP 
#+BEGIN_SRC emacs-lisp
    (defun efs/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

    (use-package lsp-mode
      :straight t
      :commands lsp
      :hook
      (lsp-mode . efs/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
      :config
      (setq lsp-enable-completion-at-point t
	    lsp-prefer-capf t) 
      )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :straight t)
#+END_SRC
** setup gc-cons-threshld
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000
	read-process-output-max (* 1024 1024)
	treemacs-space-between-root-nodes nil
	company-idle-delay 0.0
	company-minimum-prefix-length 1
	lsp-idle-delay 0.1)  ;; clangd is fast
#+END_SRC
* Python
** Python with LSP
#+BEGIN_SRC shell :tangle no
  pip install --user "python-language-server[all]"
#+END_SRC
https://emacs-lsp.github.io/lsp-python-ms/
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms 
    :straight t
    :init
    (setq
     lsp-python-ms-auto-install-server t
     lsp-python-ms-executable (executable-find "python-language-server"))
    :hook
    (python-mode . (lambda ()
			   (require 'lsp-python-ms)
			   (lsp-deferred)))
    (python-mode . linum-mode))
#+END_SRC
** LSP python with tramp
   #+BEGIN_SRC emacs-lisp
     (lsp-register-client
      (make-lsp-client :new-connection (lsp-tramp-connection "pyls")
		       :major-modes '(python-mode)
		       :remote? t
		       :server-id 'pyls-remote))
   #+END_SRC
** Python with elpy
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package elpy
    :straight t
    :defer t
    :config
    (advice-add 'python-mode :before 'elpy-enable)
    (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
    (flymake-mode)
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    :hook (python-mode . linum-mode)
    )
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :defer t
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (global-flycheck-mode)
    (setq flycheck-indication-mode 'left-fringe)
    (setq-default flycheck-disabled-checkers '(python-pylint))
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :straight t
    :defer)
#+END_SRC
* LaTeX with LSP
*** Install texlab
#+BEGIN_SRC shell
  cargo install --git https://github.com/latex-lsp/texlab.git
#+END_SRC
*** Install lsp-latex
#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package
   '(lsp-latex :type git :host github :repo "ROCKTAKEY/lsp-latex"))
#+END_SRC
*** Configuration
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'lsp-latex)
  (setq lsp-latex-texlab-executable "~/.cargo/bin/texlab"
	lsp-latex-forward-search-after t
	lsp-latex-forward-search-executable "evince"
	lsp-latex-forward-search-args '("-i" "%l" "%p")
	tex-command "pdflatex --synctex=1")

  (with-eval-after-load "tex-mode"
    (add-hook 'latex-mode-hook 'lsp)
    (add-hook 'tex-mode-hook 'lsp)
    (define-key latex-mode-map (kbd "C-c C-c") 'lsp-latex-build)
    (define-key latex-mode-map (kbd "C-c C-v") 'lsp-latex-forward-search))

  ;; For bibtex
  (with-eval-after-load "bibtex"
    (add-hook 'bibtex-mode-hook 'lsp))
#+END_SRC
* Julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :straight t
    :defer
    :hook (julia-mode . linum-mode))
#+END_SRC
* Jupyter
#+BEGIN_SRC emacs-lisp
  (use-package jupyter
    :straight t
    :defer)
#+END_SRC
* Company autocompletion
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :defer
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t)
  )
#+END_SRC
* Shell mode 
** Disable company
Company mode in remote shell causes commands to hang. So let's just
disable company mode in remote shell
#+BEGIN_SRC emacs-lisp
  (defun arif/shell-mode-setup () 
    (when (and (fboundp 'company-mode)
	       (file-remote-p default-directory))
      (company-mode -1)))
  (add-hook 'shell-mode-hook #'arif/shell-mode-setup)
#+END_SRC
** Sourcing shell profile
I use zsh/bash shells on my remote machines. Tramp by default does not
source the profile files ~.zshrc~ or ~.bashrc~ on the remote
machine. After login on the remote shell I execute ~/bin/zsh~ or
~/bin/bash~ to source the ~.zshrc/.bashrc~ files. 
* Selectrum
#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package 'selectrum)
  (selectrum-mode +1)
  (straight-use-package 'selectrum-prescient)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1)
#+END_SRC
* Ivy Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight t
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t
	  ivy-count-format "(%d/%d) ")
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer))
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :config
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is
    ;; triggered.
    (setq which-key-idle-delay 1)
    ;;(setq which-key-idle-secondary-delay 0.01)
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :after (dired)
  :config
  (setq dired-omit-verbose nil
        dired-omit-files
        (concat dired-omit-files "\\|^\\..+$"))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+END_SRC
** Sort directories first
   #+BEGIN_SRC emacs-lisp
     (defun mydired-sort ()
       "Sort dired listings with directories first."
       (save-excursion
	 (let (buffer-read-only)
	   (forward-line 2) ;; beyond dir. header 
	   (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
	 (set-buffer-modified-p nil)))

     (defadvice dired-readin
	 (after dired-after-updating-hook first () activate)
       "Sort dired listings with directories first before adding marks."
       (mydired-sort))
   #+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :defer
    :bind ("C-x g" . magit-status))
#+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :defer
    :init
    (add-hook 'after-init-hook 'yas-global-mode)
    :config
    (global-set-key (kbd "C-c y y") 'yas-expand))

  (defun my-org-latex-yas ()
  ;;  "Activate org and LaTeX yas expansion in org-mode buffers."
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'my-org-latex-yas)

  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

  (defun arif/latex-greek-symbols (english-symbol)
    (interactive)
    (defvar arif/greek-symbols)
    (setq arif/greek-symbols '(("a" . "\\alpha")
			       ("b" . "\\beta")
			       ("c" . "\\chi")
			       ("d" . "\\delta")
			       ("D" . "\\Delta")
			       ("e" . "\\epsilon")
			       ("f" . "\\phi")
			       ("F" . "\\Phi")
			       ("g" . "\\gamma")
			       ("G" . "\\Gamma")
			       ("i" . "\\iota")
			       ("k" . "\\kappa")
			       ("l" . "\\lambda")
			       ("L" . "\\Lambda")
			       ("m" . "\\mu")
			       ("n" . "\\nu")
			       ("o" . "\\omega")
			       ("O" . "\\Omega")
			       ("p" . "\\pi")
			       ("P" . "\\Pi")
			       ("r" . "\\rho")
			       ("s" . "\\sigma")
			       ("t" . "\\tau")
			       ("x" . "\\xi")
			       ("ve" . "\\varepsilon")
			       ("vp" . "\\varphi"))
	  )
    (cdr (assoc english-symbol arif/greek-symbols))
    )
#+END_SRC
** TeX
*** Environments
Keys for environments starts with ~e~ and then the first two alphabets of the environment name.
|-------------+-----|
| Environment | Key |
|-------------+-----|
| Equation    | eeq |
|-------------+-----|
| Enumerate   | een |
|-------------+-----|
| Itemize     | eit |
|-------------+-----|
| Align       | eal |
|-------------+-----|
*** Text 
Keys for texts starts with ~@~ and then first alphabet of the desired face/shape
| Text      | Key |
|-----------+-----|
| Bold      | @b  |
|-----------+-----|
| Italic    | @i  |
|-----------+-----|
| Underline | @u  |
|-----------+-----|
*** Greek symbols
Keys for greek symbols works a little bit differently. First we hit ~@ + TAB~ then enter equivalent english alphabet.
For example ~@ + TAB + a~ will give ~\alpha~.
* backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
* Other customizations
** Change 'yes-or-no-p' to 'y-or-no-p'
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Custom commands
#+BEGIN_SRC emacs-lisp
  (arif/load-file "~/.config/emacs/custom-commands.el")
#+END_SRC
* org-mode
** Hide emphasis markup
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC
** Change bullets in list
   #+BEGIN_SRC emacs-lisp
     (font-lock-add-keywords 'org-mode
			     '(("^ *\\([-]\\) "
				(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
   #+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** setting visual line mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
** Increase latex font scale
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** org-toc
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'toc-org)
  (if (require 'toc-org nil t)
      (add-hook 'org-mode-hook 'toc-org-mode)
    (warn "toc-org not found"))
#+END_SRC
** org-tree-slide
#+BEGIN_SRC emacs-lisp
  (use-package org-tree-slide
    :straight t
    :custom
    (org-image-actual-width nil))
#+END_SRC
** perfect margin
#+BEGIN_SRC emacs-lisp
  (use-package perfect-margin
    :straight t)
#+END_SRC
* Auth Source
#+BEGIN_SRC emacs-lisp
  (setq auth-sources
	'((:source "~/.config/emacs/.authinfo.gpg")))
#+END_SRC

* ob-python
  #+BEGIN_SRC emacs-lisp
    (use-package ob-ipython
      :straight t
      :defer t)
  #+END_SRC
* Org babel
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (jupyter . t)))
  #+END_SRC

* set unicode
  #+BEGIN_SRC emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;
    ;;; set up unicode
    (prefer-coding-system       'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
    (set-terminal-coding-system 'utf-8-unix)
    (set-keyboard-coding-system 'utf-8)
    (setq-default buffer-file-coding-system 'utf-8)                      
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  #+END_SRC
  
